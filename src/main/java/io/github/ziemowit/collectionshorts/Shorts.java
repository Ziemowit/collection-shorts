/*
 *
 *  * Copyright (C) 2020-now Wayfarer Points LTD - All Rights Reserved
 *  * You may use, distribute and modify this code under the
 *  * terms of the Wayfarer Points Engine license.
 *  *
 *  * You should have received a copy of the Wayfarer Points Engine license
 *  * with this file. If not, please write to: info@wayfarerpoints.com
 *
 */

package io.github.ziemowit.collectionshorts;

import java.util.*;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public final class Shorts {

  /**
   * Shortcut for List mapping
   *
   * @param list   List to map
   * @param mapper a function to apply to each element
   * @param <R>    The element type of the new List
   * @param <T>    The element type of the old List
   * @return the mapped List
   */
  public static <R, T> List<R> map(List<T> list, Function<T, R> mapper) {
    return list.stream()
               .map(mapper)
               .collect(Collectors.toList());
  }

  /**
   * Shortcut for List filtering
   *
   * @param list      List to filter
   * @param predicate a predicate to apply to each element
   * @param <T>       The element type
   * @return the filtered List
   */
  public static <T> List<T> filter(List<T> list, Predicate<? super T> predicate) {
    return list.stream()
               .filter(predicate)
               .collect(Collectors.toList());
  }

  /**
   * Shortcut for picking only unique values from List
   *
   * @param list List with possible duplicates
   * @param <T>  The element type
   * @return the List with unique values
   */
  public static <T> List<T> unique(List<T> list) {
    return list.stream()
               .distinct()
               .collect(Collectors.toList());
  }

  /**
   * Shortcut for reversing the List
   *
   * @param list List to filter
   * @param <T>  The element type
   * @return the List with unique values
   */
  public static <T> List<T> reverse(List<T> list) {
    var result = new ArrayList<>(list);
    Collections.reverse(result);
    return List.copyOf(result);
  }

  /**
   * Shortcut for Set mapping
   *
   * @param set    Set to map
   * @param mapper a function to apply to each element
   * @param <R>    The element type of the new List
   * @param <T>    The element type of the old List
   * @return the mapped Set
   */
  public static <R, T> Set<R> map(Set<T> set, Function<T, R> mapper) {
    return set.stream()
              .map(mapper)
              .collect(Collectors.toSet());
  }

  /**
   * Shortcut for Set filtering
   *
   * @param set       Set to filter
   * @param predicate a predicate to apply to each element
   * @param <T>       The element type
   * @return the filtered Set
   */
  public static <T> Set<T> filter(Set<T> set, Predicate<? super T> predicate) {
    return set.stream()
              .filter(predicate)
              .collect(Collectors.toSet());
  }

  /**
   * Shortcut for simple grouping the Map be given function
   *
   * @param collection Collection to transform to the Map
   * @param keyPicker  Key picking function
   * @param <K>        The key type
   * @param <V>        The value type
   * @return Map generated by applying keyPicker function
   */
  public static <K, V> Map<K, V> groupByKey(Collection<V> collection, Function<V, K> keyPicker) {
    return collection.stream()
                     .collect(Collectors.toMap(keyPicker, it -> it));
  }


}
